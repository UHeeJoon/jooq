/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.generated.tables.JActor;
import org.jooq.generated.tables.JAddress;
import org.jooq.generated.tables.JCategory;
import org.jooq.generated.tables.JCity;
import org.jooq.generated.tables.JCountry;
import org.jooq.generated.tables.JCustomer;
import org.jooq.generated.tables.JFilm;
import org.jooq.generated.tables.JFilmActor;
import org.jooq.generated.tables.JFilmCategory;
import org.jooq.generated.tables.JFilmText;
import org.jooq.generated.tables.JInventory;
import org.jooq.generated.tables.JLanguage;
import org.jooq.generated.tables.JPayment;
import org.jooq.generated.tables.JRental;
import org.jooq.generated.tables.JStaff;
import org.jooq.generated.tables.JStore;
import org.jooq.generated.tables.records.ActorRecord;
import org.jooq.generated.tables.records.AddressRecord;
import org.jooq.generated.tables.records.CategoryRecord;
import org.jooq.generated.tables.records.CityRecord;
import org.jooq.generated.tables.records.CountryRecord;
import org.jooq.generated.tables.records.CustomerRecord;
import org.jooq.generated.tables.records.FilmActorRecord;
import org.jooq.generated.tables.records.FilmCategoryRecord;
import org.jooq.generated.tables.records.FilmRecord;
import org.jooq.generated.tables.records.FilmTextRecord;
import org.jooq.generated.tables.records.InventoryRecord;
import org.jooq.generated.tables.records.LanguageRecord;
import org.jooq.generated.tables.records.PaymentRecord;
import org.jooq.generated.tables.records.RentalRecord;
import org.jooq.generated.tables.records.StaffRecord;
import org.jooq.generated.tables.records.StoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ActorRecord> CONSTRAINT_3 = Internal.createUniqueKey(JActor.ACTOR, DSL.name("CONSTRAINT_3"), new TableField[] { JActor.ACTOR.ACTOR_ID }, true);
    public static final UniqueKey<AddressRecord> CONSTRAINT_E = Internal.createUniqueKey(JAddress.ADDRESS, DSL.name("CONSTRAINT_E"), new TableField[] { JAddress.ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<CategoryRecord> CONSTRAINT_31 = Internal.createUniqueKey(JCategory.CATEGORY, DSL.name("CONSTRAINT_31"), new TableField[] { JCategory.CATEGORY.CATEGORY_ID }, true);
    public static final UniqueKey<CityRecord> CONSTRAINT_1 = Internal.createUniqueKey(JCity.CITY, DSL.name("CONSTRAINT_1"), new TableField[] { JCity.CITY.CITY_ID }, true);
    public static final UniqueKey<CountryRecord> CONSTRAINT_6 = Internal.createUniqueKey(JCountry.COUNTRY, DSL.name("CONSTRAINT_6"), new TableField[] { JCountry.COUNTRY.COUNTRY_ID }, true);
    public static final UniqueKey<CustomerRecord> CONSTRAINT_5 = Internal.createUniqueKey(JCustomer.CUSTOMER, DSL.name("CONSTRAINT_5"), new TableField[] { JCustomer.CUSTOMER.CUSTOMER_ID }, true);
    public static final UniqueKey<FilmRecord> CONSTRAINT_2 = Internal.createUniqueKey(JFilm.FILM, DSL.name("CONSTRAINT_2"), new TableField[] { JFilm.FILM.FILM_ID }, true);
    public static final UniqueKey<FilmActorRecord> CONSTRAINT_7 = Internal.createUniqueKey(JFilmActor.FILM_ACTOR, DSL.name("CONSTRAINT_7"), new TableField[] { JFilmActor.FILM_ACTOR.ACTOR_ID, JFilmActor.FILM_ACTOR.FILM_ID }, true);
    public static final UniqueKey<FilmCategoryRecord> CONSTRAINT_4 = Internal.createUniqueKey(JFilmCategory.FILM_CATEGORY, DSL.name("CONSTRAINT_4"), new TableField[] { JFilmCategory.FILM_CATEGORY.CATEGORY_ID, JFilmCategory.FILM_CATEGORY.FILM_ID }, true);
    public static final UniqueKey<FilmTextRecord> CONSTRAINT_67 = Internal.createUniqueKey(JFilmText.FILM_TEXT, DSL.name("CONSTRAINT_67"), new TableField[] { JFilmText.FILM_TEXT.FILM_ID }, true);
    public static final UniqueKey<InventoryRecord> CONSTRAINT_2D = Internal.createUniqueKey(JInventory.INVENTORY, DSL.name("CONSTRAINT_2D"), new TableField[] { JInventory.INVENTORY.INVENTORY_ID }, true);
    public static final UniqueKey<LanguageRecord> CONSTRAINT_C = Internal.createUniqueKey(JLanguage.LANGUAGE, DSL.name("CONSTRAINT_C"), new TableField[] { JLanguage.LANGUAGE.LANGUAGE_ID }, true);
    public static final UniqueKey<PaymentRecord> CONSTRAINT_F = Internal.createUniqueKey(JPayment.PAYMENT, DSL.name("CONSTRAINT_F"), new TableField[] { JPayment.PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<RentalRecord> CONSTRAINT_8 = Internal.createUniqueKey(JRental.RENTAL, DSL.name("CONSTRAINT_8"), new TableField[] { JRental.RENTAL.RENTAL_ID }, true);
    public static final UniqueKey<RentalRecord> RENTAL_DATE = Internal.createUniqueKey(JRental.RENTAL, DSL.name("RENTAL_DATE"), new TableField[] { JRental.RENTAL.RENTAL_DATE, JRental.RENTAL.INVENTORY_ID, JRental.RENTAL.CUSTOMER_ID }, true);
    public static final UniqueKey<StaffRecord> CONSTRAINT_4B = Internal.createUniqueKey(JStaff.STAFF, DSL.name("CONSTRAINT_4B"), new TableField[] { JStaff.STAFF.STAFF_ID }, true);
    public static final UniqueKey<StoreRecord> CONSTRAINT_4B9 = Internal.createUniqueKey(JStore.STORE, DSL.name("CONSTRAINT_4B9"), new TableField[] { JStore.STORE.STORE_ID }, true);
    public static final UniqueKey<StoreRecord> IDX_UNIQUE_MANAGER = Internal.createUniqueKey(JStore.STORE, DSL.name("IDX_UNIQUE_MANAGER"), new TableField[] { JStore.STORE.MANAGER_STAFF_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AddressRecord, CityRecord> FKPO044NG5X4GYNB291CV24VTEA = Internal.createForeignKey(JAddress.ADDRESS, DSL.name("FKPO044NG5X4GYNB291CV24VTEA"), new TableField[] { JAddress.ADDRESS.CITY_ID }, Keys.CONSTRAINT_1, new TableField[] { JCity.CITY.CITY_ID }, true);
    public static final ForeignKey<CityRecord, CountryRecord> FKRPD7J1P7YXR784ADKX4PYEPBA = Internal.createForeignKey(JCity.CITY, DSL.name("FKRPD7J1P7YXR784ADKX4PYEPBA"), new TableField[] { JCity.CITY.COUNTRY_ID }, Keys.CONSTRAINT_6, new TableField[] { JCountry.COUNTRY.COUNTRY_ID }, true);
    public static final ForeignKey<CustomerRecord, StoreRecord> FK4B6XS77VAIJUP4S0Q2S06MVDO = Internal.createForeignKey(JCustomer.CUSTOMER, DSL.name("FK4B6XS77VAIJUP4S0Q2S06MVDO"), new TableField[] { JCustomer.CUSTOMER.STORE_ID }, Keys.CONSTRAINT_4B9, new TableField[] { JStore.STORE.STORE_ID }, true);
    public static final ForeignKey<CustomerRecord, AddressRecord> FKGLKHKMH2VYN790IJS6HIQQPI = Internal.createForeignKey(JCustomer.CUSTOMER, DSL.name("FKGLKHKMH2VYN790IJS6HIQQPI"), new TableField[] { JCustomer.CUSTOMER.ADDRESS_ID }, Keys.CONSTRAINT_E, new TableField[] { JAddress.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK2KQPRBTKPSGI2VOIH48AF3STT = Internal.createForeignKey(JFilm.FILM, DSL.name("FK2KQPRBTKPSGI2VOIH48AF3STT"), new TableField[] { JFilm.FILM.ORIGINAL_LANGUAGE_ID }, Keys.CONSTRAINT_C, new TableField[] { JLanguage.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmRecord, LanguageRecord> FK88S9635V5HDDV7CWIG75M3NE2 = Internal.createForeignKey(JFilm.FILM, DSL.name("FK88S9635V5HDDV7CWIG75M3NE2"), new TableField[] { JFilm.FILM.LANGUAGE_ID }, Keys.CONSTRAINT_C, new TableField[] { JLanguage.LANGUAGE.LANGUAGE_ID }, true);
    public static final ForeignKey<FilmActorRecord, FilmRecord> FK44UK58X166XX1QD03300206NR = Internal.createForeignKey(JFilmActor.FILM_ACTOR, DSL.name("FK44UK58X166XX1QD03300206NR"), new TableField[] { JFilmActor.FILM_ACTOR.FILM_ID }, Keys.CONSTRAINT_2, new TableField[] { JFilm.FILM.FILM_ID }, true);
    public static final ForeignKey<FilmActorRecord, ActorRecord> FKSR7LO9P4INTEI645CWS4F9T4L = Internal.createForeignKey(JFilmActor.FILM_ACTOR, DSL.name("FKSR7LO9P4INTEI645CWS4F9T4L"), new TableField[] { JFilmActor.FILM_ACTOR.ACTOR_ID }, Keys.CONSTRAINT_3, new TableField[] { JActor.ACTOR.ACTOR_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, CategoryRecord> FKO1VE8MJM8CXF87G7R55W53RCJ = Internal.createForeignKey(JFilmCategory.FILM_CATEGORY, DSL.name("FKO1VE8MJM8CXF87G7R55W53RCJ"), new TableField[] { JFilmCategory.FILM_CATEGORY.CATEGORY_ID }, Keys.CONSTRAINT_31, new TableField[] { JCategory.CATEGORY.CATEGORY_ID }, true);
    public static final ForeignKey<FilmCategoryRecord, FilmRecord> FKR4U0M4Y199RHOHQIY9GD46L7U = Internal.createForeignKey(JFilmCategory.FILM_CATEGORY, DSL.name("FKR4U0M4Y199RHOHQIY9GD46L7U"), new TableField[] { JFilmCategory.FILM_CATEGORY.FILM_ID }, Keys.CONSTRAINT_2, new TableField[] { JFilm.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, FilmRecord> FK1W3JXDCJ9ER5QBNT5OKL5QUEK = Internal.createForeignKey(JInventory.INVENTORY, DSL.name("FK1W3JXDCJ9ER5QBNT5OKL5QUEK"), new TableField[] { JInventory.INVENTORY.FILM_ID }, Keys.CONSTRAINT_2, new TableField[] { JFilm.FILM.FILM_ID }, true);
    public static final ForeignKey<InventoryRecord, StoreRecord> FKTDGY352S88SHLSDBHXQP5K9VK = Internal.createForeignKey(JInventory.INVENTORY, DSL.name("FKTDGY352S88SHLSDBHXQP5K9VK"), new TableField[] { JInventory.INVENTORY.STORE_ID }, Keys.CONSTRAINT_4B9, new TableField[] { JStore.STORE.STORE_ID }, true);
    public static final ForeignKey<PaymentRecord, RentalRecord> FK6MA2J46GJBGGRP573UYA2UB45 = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FK6MA2J46GJBGGRP573UYA2UB45"), new TableField[] { JPayment.PAYMENT.RENTAL_ID }, Keys.CONSTRAINT_8, new TableField[] { JRental.RENTAL.RENTAL_ID }, true);
    public static final ForeignKey<PaymentRecord, CustomerRecord> FKBY2SKJF3OV608YB6NM16B49LG = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FKBY2SKJF3OV608YB6NM16B49LG"), new TableField[] { JPayment.PAYMENT.CUSTOMER_ID }, Keys.CONSTRAINT_5, new TableField[] { JCustomer.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<PaymentRecord, StaffRecord> FKR2KY59817R20R8FMB030PGW5P = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FKR2KY59817R20R8FMB030PGW5P"), new TableField[] { JPayment.PAYMENT.STAFF_ID }, Keys.CONSTRAINT_4B, new TableField[] { JStaff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<RentalRecord, CustomerRecord> FK7JF1F7B8W6JOTL5QW1KXN8114 = Internal.createForeignKey(JRental.RENTAL, DSL.name("FK7JF1F7B8W6JOTL5QW1KXN8114"), new TableField[] { JRental.RENTAL.CUSTOMER_ID }, Keys.CONSTRAINT_5, new TableField[] { JCustomer.CUSTOMER.CUSTOMER_ID }, true);
    public static final ForeignKey<RentalRecord, StaffRecord> FKG5XHR8HE6BF3O2E4GL4FAWWR2 = Internal.createForeignKey(JRental.RENTAL, DSL.name("FKG5XHR8HE6BF3O2E4GL4FAWWR2"), new TableField[] { JRental.RENTAL.STAFF_ID }, Keys.CONSTRAINT_4B, new TableField[] { JStaff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<RentalRecord, InventoryRecord> FKHA0Q4DEOEJ14CTJWLNWGHDOI9 = Internal.createForeignKey(JRental.RENTAL, DSL.name("FKHA0Q4DEOEJ14CTJWLNWGHDOI9"), new TableField[] { JRental.RENTAL.INVENTORY_ID }, Keys.CONSTRAINT_2D, new TableField[] { JInventory.INVENTORY.INVENTORY_ID }, true);
    public static final ForeignKey<StaffRecord, StoreRecord> FKAVQ26DLB2G739Y5Q453AOD7NQ = Internal.createForeignKey(JStaff.STAFF, DSL.name("FKAVQ26DLB2G739Y5Q453AOD7NQ"), new TableField[] { JStaff.STAFF.STORE_ID }, Keys.CONSTRAINT_4B9, new TableField[] { JStore.STORE.STORE_ID }, true);
    public static final ForeignKey<StaffRecord, AddressRecord> FKP2DDAJ8266482GXWJS2DNBLAA = Internal.createForeignKey(JStaff.STAFF, DSL.name("FKP2DDAJ8266482GXWJS2DNBLAA"), new TableField[] { JStaff.STAFF.ADDRESS_ID }, Keys.CONSTRAINT_E, new TableField[] { JAddress.ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<StoreRecord, StaffRecord> FK93ODD5QBXDCHJMAJ7QA84K8XP = Internal.createForeignKey(JStore.STORE, DSL.name("FK93ODD5QBXDCHJMAJ7QA84K8XP"), new TableField[] { JStore.STORE.MANAGER_STAFF_ID }, Keys.CONSTRAINT_4B, new TableField[] { JStaff.STAFF.STAFF_ID }, true);
    public static final ForeignKey<StoreRecord, AddressRecord> FKP2SEN6OUWNLHT537CSK0KIP90 = Internal.createForeignKey(JStore.STORE, DSL.name("FKP2SEN6OUWNLHT537CSK0KIP90"), new TableField[] { JStore.STORE.ADDRESS_ID }, Keys.CONSTRAINT_E, new TableField[] { JAddress.ADDRESS.ADDRESS_ID }, true);
}
