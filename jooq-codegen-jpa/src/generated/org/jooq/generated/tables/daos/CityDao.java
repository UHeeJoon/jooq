/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.generated.tables.JCity;
import org.jooq.generated.tables.pojos.City;
import org.jooq.generated.tables.records.CityRecord;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CityDao extends DAOImpl<CityRecord, City, Long> {

    /**
     * Create a new CityDao without any configuration
     */
    public CityDao() {
        super(JCity.CITY, City.class);
    }

    /**
     * Create a new CityDao with an attached configuration
     */
    public CityDao(Configuration configuration) {
        super(JCity.CITY, City.class, configuration);
    }

    @Override
    public Long getId(City object) {
        return object.getCityId();
    }

    /**
     * Fetch records that have <code>CITY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<City> fetchRangeOfJCityId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JCity.CITY.CITY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CITY_ID IN (values)</code>
     */
    public List<City> fetchByJCityId(Long... values) {
        return fetch(JCity.CITY.CITY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>CITY_ID = value</code>
     */
    public City fetchOneByJCityId(Long value) {
        return fetchOne(JCity.CITY.CITY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>CITY_ID = value</code>
     */
    public Optional<City> fetchOptionalByJCityId(Long value) {
        return fetchOptional(JCity.CITY.CITY_ID, value);
    }

    /**
     * Fetch records that have <code>CITY BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<City> fetchRangeOfJCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCity.CITY.CITY_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CITY IN (values)</code>
     */
    public List<City> fetchByJCity(String... values) {
        return fetch(JCity.CITY.CITY_, values);
    }

    /**
     * Fetch records that have <code>LAST_UPDATE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<City> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JCity.CITY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LAST_UPDATE IN (values)</code>
     */
    public List<City> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JCity.CITY.LAST_UPDATE, values);
    }

    /**
     * Fetch records that have <code>COUNTRY_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<City> fetchRangeOfJCountryId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JCity.CITY.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>COUNTRY_ID IN (values)</code>
     */
    public List<City> fetchByJCountryId(Long... values) {
        return fetch(JCity.CITY.COUNTRY_ID, values);
    }
}
