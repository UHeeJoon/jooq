/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JCity.CityPath;
import org.jooq.generated.tables.JCustomer.CustomerPath;
import org.jooq.generated.tables.JStaff.StaffPath;
import org.jooq.generated.tables.JStore.StorePath;
import org.jooq.generated.tables.records.AddressRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JAddress extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ADDRESS</code>
     */
    public static final JAddress ADDRESS = new JAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>ADDRESS.ADDRESS_ID</code>.
     */
    public final TableField<AddressRecord, Long> ADDRESS_ID = createField(DSL.name("ADDRESS_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ADDRESS.ADDRESS</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_ = createField(DSL.name("ADDRESS"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>ADDRESS.ADDRESS2</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS2 = createField(DSL.name("ADDRESS2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>ADDRESS.DISTRICT</code>.
     */
    public final TableField<AddressRecord, String> DISTRICT = createField(DSL.name("DISTRICT"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>ADDRESS.LAST_UPDATE</code>.
     */
    public final TableField<AddressRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>ADDRESS.PHONE</code>.
     */
    public final TableField<AddressRecord, String> PHONE = createField(DSL.name("PHONE"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>ADDRESS.POSTAL_CODE</code>.
     */
    public final TableField<AddressRecord, String> POSTAL_CODE = createField(DSL.name("POSTAL_CODE"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>ADDRESS.CITY_ID</code>.
     */
    public final TableField<AddressRecord, Long> CITY_ID = createField(DSL.name("CITY_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private JAddress(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JAddress(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ADDRESS</code> table reference
     */
    public JAddress(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>ADDRESS</code> table reference
     */
    public JAddress(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>ADDRESS</code> table reference
     */
    public JAddress() {
        this(DSL.name("ADDRESS"), null);
    }

    public <O extends Record> JAddress(Table<O> path, ForeignKey<O, AddressRecord> childPath, InverseForeignKey<O, AddressRecord> parentPath) {
        super(path, childPath, parentPath, ADDRESS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AddressPath extends JAddress implements Path<AddressRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AddressPath(Table<O> path, ForeignKey<O, AddressRecord> childPath, InverseForeignKey<O, AddressRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AddressPath(Name alias, Table<AddressRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AddressPath as(String alias) {
            return new AddressPath(DSL.name(alias), this);
        }

        @Override
        public AddressPath as(Name alias) {
            return new AddressPath(alias, this);
        }

        @Override
        public AddressPath as(Table<?> alias) {
            return new AddressPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_CITY_ID);
    }

    @Override
    public Identity<AddressRecord, Long> getIdentity() {
        return (Identity<AddressRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKPO044NG5X4GYNB291CV24VTEA);
    }

    private transient CityPath _city;

    /**
     * Get the implicit join path to the <code>PUBLIC.CITY</code> table.
     */
    public CityPath city() {
        if (_city == null)
            _city = new CityPath(this, Keys.FKPO044NG5X4GYNB291CV24VTEA, null);

        return _city;
    }

    private transient CustomerPath _customer;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.CUSTOMER</code>
     * table
     */
    public CustomerPath customer() {
        if (_customer == null)
            _customer = new CustomerPath(this, null, Keys.FKGLKHKMH2VYN790IJS6HIQQPI.getInverseKey());

        return _customer;
    }

    private transient StaffPath _staff;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.STAFF</code> table
     */
    public StaffPath staff() {
        if (_staff == null)
            _staff = new StaffPath(this, null, Keys.FKP2DDAJ8266482GXWJS2DNBLAA.getInverseKey());

        return _staff;
    }

    private transient StorePath _store;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.STORE</code> table
     */
    public StorePath store() {
        if (_store == null)
            _store = new StorePath(this, null, Keys.FKP2SEN6OUWNLHT537CSK0KIP90.getInverseKey());

        return _store;
    }

    @Override
    public JAddress as(String alias) {
        return new JAddress(DSL.name(alias), this);
    }

    @Override
    public JAddress as(Name alias) {
        return new JAddress(alias, this);
    }

    @Override
    public JAddress as(Table<?> alias) {
        return new JAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(String name) {
        return new JAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(Name name) {
        return new JAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(Table<?> name) {
        return new JAddress(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress where(Condition condition) {
        return new JAddress(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAddress where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAddress where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAddress where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JAddress where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JAddress whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
