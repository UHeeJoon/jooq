/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JActor.ActorPath;
import org.jooq.generated.tables.JFilm.FilmPath;
import org.jooq.generated.tables.records.FilmActorRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFilmActor extends TableImpl<FilmActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>FILM_ACTOR</code>
     */
    public static final JFilmActor FILM_ACTOR = new JFilmActor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilmActorRecord> getRecordType() {
        return FilmActorRecord.class;
    }

    /**
     * The column <code>FILM_ACTOR.ACTOR_ID</code>.
     */
    public final TableField<FilmActorRecord, Long> ACTOR_ID = createField(DSL.name("ACTOR_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>FILM_ACTOR.FILM_ID</code>.
     */
    public final TableField<FilmActorRecord, Long> FILM_ID = createField(DSL.name("FILM_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>FILM_ACTOR.LAST_UPDATE</code>.
     */
    public final TableField<FilmActorRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JFilmActor(Name alias, Table<FilmActorRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JFilmActor(Name alias, Table<FilmActorRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>FILM_ACTOR</code> table reference
     */
    public JFilmActor(String alias) {
        this(DSL.name(alias), FILM_ACTOR);
    }

    /**
     * Create an aliased <code>FILM_ACTOR</code> table reference
     */
    public JFilmActor(Name alias) {
        this(alias, FILM_ACTOR);
    }

    /**
     * Create a <code>FILM_ACTOR</code> table reference
     */
    public JFilmActor() {
        this(DSL.name("FILM_ACTOR"), null);
    }

    public <O extends Record> JFilmActor(Table<O> path, ForeignKey<O, FilmActorRecord> childPath, InverseForeignKey<O, FilmActorRecord> parentPath) {
        super(path, childPath, parentPath, FILM_ACTOR);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilmActorPath extends JFilmActor implements Path<FilmActorRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilmActorPath(Table<O> path, ForeignKey<O, FilmActorRecord> childPath, InverseForeignKey<O, FilmActorRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilmActorPath(Name alias, Table<FilmActorRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilmActorPath as(String alias) {
            return new FilmActorPath(DSL.name(alias), this);
        }

        @Override
        public FilmActorPath as(Name alias) {
            return new FilmActorPath(alias, this);
        }

        @Override
        public FilmActorPath as(Table<?> alias) {
            return new FilmActorPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_FILM_ID);
    }

    @Override
    public UniqueKey<FilmActorRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<ForeignKey<FilmActorRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKSR7LO9P4INTEI645CWS4F9T4L, Keys.FK44UK58X166XX1QD03300206NR);
    }

    private transient ActorPath _actor;

    /**
     * Get the implicit join path to the <code>PUBLIC.ACTOR</code> table.
     */
    public ActorPath actor() {
        if (_actor == null)
            _actor = new ActorPath(this, Keys.FKSR7LO9P4INTEI645CWS4F9T4L, null);

        return _actor;
    }

    private transient FilmPath _film;

    /**
     * Get the implicit join path to the <code>PUBLIC.FILM</code> table.
     */
    public FilmPath film() {
        if (_film == null)
            _film = new FilmPath(this, Keys.FK44UK58X166XX1QD03300206NR, null);

        return _film;
    }

    @Override
    public JFilmActor as(String alias) {
        return new JFilmActor(DSL.name(alias), this);
    }

    @Override
    public JFilmActor as(Name alias) {
        return new JFilmActor(alias, this);
    }

    @Override
    public JFilmActor as(Table<?> alias) {
        return new JFilmActor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmActor rename(String name) {
        return new JFilmActor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmActor rename(Name name) {
        return new JFilmActor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmActor rename(Table<?> name) {
        return new JFilmActor(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor where(Condition condition) {
        return new JFilmActor(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilmActor where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilmActor where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilmActor where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JFilmActor where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JFilmActor whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
