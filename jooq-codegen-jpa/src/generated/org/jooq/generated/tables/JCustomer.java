/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.generated.DefaultSchema;
import org.jooq.generated.Indexes;
import org.jooq.generated.Keys;
import org.jooq.generated.tables.JAddress.AddressPath;
import org.jooq.generated.tables.JPayment.PaymentPath;
import org.jooq.generated.tables.JRental.RentalPath;
import org.jooq.generated.tables.JStore.StorePath;
import org.jooq.generated.tables.records.CustomerRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCustomer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CUSTOMER</code>
     */
    public static final JCustomer CUSTOMER = new JCustomer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>CUSTOMER.CUSTOMER_ID</code>.
     */
    public final TableField<CustomerRecord, Long> CUSTOMER_ID = createField(DSL.name("CUSTOMER_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>CUSTOMER.ACTIVE</code>.
     */
    public final TableField<CustomerRecord, Boolean> ACTIVE = createField(DSL.name("ACTIVE"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>CUSTOMER.CREATE_DATE</code>.
     */
    public final TableField<CustomerRecord, LocalDateTime> CREATE_DATE = createField(DSL.name("CREATE_DATE"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.EMAIL</code>.
     */
    public final TableField<CustomerRecord, String> EMAIL = createField(DSL.name("EMAIL"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>CUSTOMER.FIRST_NAME</code>.
     */
    public final TableField<CustomerRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.LAST_NAME</code>.
     */
    public final TableField<CustomerRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.LAST_UPDATE</code>.
     */
    public final TableField<CustomerRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("LAST_UPDATE"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>CUSTOMER.ADDRESS_ID</code>.
     */
    public final TableField<CustomerRecord, Long> ADDRESS_ID = createField(DSL.name("ADDRESS_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>CUSTOMER.STORE_ID</code>.
     */
    public final TableField<CustomerRecord, Long> STORE_ID = createField(DSL.name("STORE_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private JCustomer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private JCustomer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>CUSTOMER</code> table reference
     */
    public JCustomer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>CUSTOMER</code> table reference
     */
    public JCustomer(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>CUSTOMER</code> table reference
     */
    public JCustomer() {
        this(DSL.name("CUSTOMER"), null);
    }

    public <O extends Record> JCustomer(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomerPath extends JCustomer implements Path<CustomerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CustomerPath(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomerPath(Name alias, Table<CustomerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomerPath as(String alias) {
            return new CustomerPath(DSL.name(alias), this);
        }

        @Override
        public CustomerPath as(Name alias) {
            return new CustomerPath(alias, this);
        }

        @Override
        public CustomerPath as(Table<?> alias) {
            return new CustomerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_FK_ADDRESS_ID, Indexes.IDX_FK_STORE_ID, Indexes.IDX_LAST_NAME);
    }

    @Override
    public Identity<CustomerRecord, Long> getIdentity() {
        return (Identity<CustomerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_5;
    }

    @Override
    public List<ForeignKey<CustomerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKGLKHKMH2VYN790IJS6HIQQPI, Keys.FK4B6XS77VAIJUP4S0Q2S06MVDO);
    }

    private transient AddressPath _address;

    /**
     * Get the implicit join path to the <code>PUBLIC.ADDRESS</code> table.
     */
    public AddressPath address() {
        if (_address == null)
            _address = new AddressPath(this, Keys.FKGLKHKMH2VYN790IJS6HIQQPI, null);

        return _address;
    }

    private transient StorePath _store;

    /**
     * Get the implicit join path to the <code>PUBLIC.STORE</code> table.
     */
    public StorePath store() {
        if (_store == null)
            _store = new StorePath(this, Keys.FK4B6XS77VAIJUP4S0Q2S06MVDO, null);

        return _store;
    }

    private transient RentalPath _rental;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.RENTAL</code>
     * table
     */
    public RentalPath rental() {
        if (_rental == null)
            _rental = new RentalPath(this, null, Keys.FK7JF1F7B8W6JOTL5QW1KXN8114.getInverseKey());

        return _rental;
    }

    private transient PaymentPath _payment;

    /**
     * Get the implicit to-many join path to the <code>PUBLIC.PAYMENT</code>
     * table
     */
    public PaymentPath payment() {
        if (_payment == null)
            _payment = new PaymentPath(this, null, Keys.FKBY2SKJF3OV608YB6NM16B49LG.getInverseKey());

        return _payment;
    }

    @Override
    public JCustomer as(String alias) {
        return new JCustomer(DSL.name(alias), this);
    }

    @Override
    public JCustomer as(Name alias) {
        return new JCustomer(alias, this);
    }

    @Override
    public JCustomer as(Table<?> alias) {
        return new JCustomer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCustomer rename(String name) {
        return new JCustomer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCustomer rename(Name name) {
        return new JCustomer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCustomer rename(Table<?> name) {
        return new JCustomer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer where(Condition condition) {
        return new JCustomer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCustomer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCustomer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCustomer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public JCustomer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public JCustomer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
